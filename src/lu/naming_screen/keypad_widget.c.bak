#include "lu/naming_screen/keypad_widget.h"

#include "constants/characters.h"
#include "menu.h" // AddTextPrinterParameterized3
#include "text.h"

#define MAX_ROWS 4 // for keys only
#define MAX_COLS 8 // for keys only

enum ButtonType {
   BUTTONTYPE_NONE,
   BUTTONTYPE_KEY,
   BUTTONTYPE_CHARSET,
   BUTTONTYPE_BACKSPACE,
   BUTTONTYPE_SUBMIT,
};
struct ButtonInfo {
   enum ButtonType type;
   union {
      u8 charset;   // BUTTONTYPE_CHARSET
      u8 character; // BUTTONTYPE_KEY
   };
};

enum Charset {
   CHARSET_UPPERCASE,
   CHARSET_LOWERCASE,
   CHARSET_SYMBOLS,
};
static const struct CharsetInfo {
   const u8* characters;
   u8 rows;
   u8 cols;
   u8 bgcolor; // index of a color within our palette
} sCharsets[] = {
   [CHARSET_UPPERCASE] = {
      .characters = __(
         "ABCDEF ."
         "GHIJKL ,"
         "MNOPQRS "
         "TUVWXYZ "
      ),
      .rows    = MAX_ROWS,
      .cols    = MAX_COLS,
      .bgcolor = 13,
   },
   [CHARSET_LOWERCASE] = {
      .characters = __(
         "abcdef ."
         "ghijkl ,"
         "mnopqrs "
         "tuvwxyz "
      ),
      .rows    = MAX_ROWS,
      .cols    = MAX_COLS,
      .bgcolor = 14,
   },
   [CHARSET_SYMBOLS] = {
      .characters = __(
         "01234 "
         "56789 "
         "!?♂♀/-"
         "…“”‘' "
      ),
      .rows    = MAX_ROWS,
      .cols    = 6,
      .bgcolor = 15,
   },
};

// Forward-declarations of internal functions:

static void GetButtonTypeAtCursor(const struct LuNamingScreenKeypadWidget* widget, struct ButtonInfo*);
static void MoveCursorToOK(struct LuNamingScreenKeypadWidget* widget);
static void PrintKeys(struct LuNamingScreenKeypadWidget* widget);

// External functions:

extern void InitNamingScreenKeypad(struct LuNamingScreenKeypadWidget* widget);
extern void NamingScreenKeypad_HandleInput(
   struct LuNamingScreenKeypadWidget*      widget,
   struct LuNamingScreenKeypadInputResult* result
) {
   result->type = NAMINGSCREENKEYPAD_INPUT_NONE;
   
   if (JOY_NEW(A_BUTTON)) {
      struct ButtonInfo button;
      GetButtonTypeAtCursor(widget, &button);
      switch (button.type) {
         case BUTTONTYPE_KEY:
            // TODO: input key `button.character`
            break;
         case BUTTONTYPE_CHARSET:
            // TODO: switch to charset `button.charset`
            break;
         case BUTTONTYPE_BACKSPACE:
            // TODO: backspace
            break;
         case BUTTONTYPE_SUBMIT:
            // TODO: submit
            break;
      }
   } else if (JOY_NEW(B_BUTTON)) {
      // TODO: backspace
      
   } else if (JOY_NEW(SELECT_BUTTON)) {
      // TODO: Swap charset
      
   } else if (JOY_NEW(START_BUTTON)) {
      // TODO: Skip cursor to "OK" button
      
   } else {
      // D-Pad movement
      
   }
}

// Internal:

static void PrintKeys(struct LuNamingScreenKeypadWidget* widget) {
   FillWindowPixelBuffer(params->window, sFillValues[page]);
   
   const struct CharsetInfo* charset = &sCharsets[widget->charset];
   u8 charcount = charset->rows * charset->cols;
   
   u8 colors[3] = {
      charset->bgcolor, TEXT_COLOR_WHITE, TEXT_COLOR_DARK_GRAY
   };
   
   u8 buf[2];
   buf[1] = EOS;
   for(u8 i = 0; i < charcount; ++i) {
      u8 x = i % charset->rows;
      u8 y = i / charset->rows;
      
      buf[0] = charset->characters[i];
      AddTextPrinterParameterized3(
         widget->window,
         FONT_NORMAL,
         x * 16,
         y * 16 + 1,
         colors,
         TEXT_SKIP_DRAW,
         buf
      );
   }
   PutWindowTilemap(widget->window);
}